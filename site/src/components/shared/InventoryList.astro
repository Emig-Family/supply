---
const { items = null, excerpt = false } = Astro.props
let inventory = items

// Load from Cloudflare D1 at runtime. If unavailable, render empty list.
try {
  if (!inventory) {
    const env = Astro.locals?.runtime?.env
    if (env?.DB) {
      const res = await env.DB.prepare('SELECT * FROM inventory ORDER BY "order" ASC').all()
      const rows = res?.results || []
      // load images for all items in bulk
      const ids = rows.map((r) => r.id)
      let imagesMap = {}
      if (ids.length) {
        const placeholders = ids.map(() => '?').join(',')
        const imgsRes = await env.DB.prepare(
          `SELECT inventory_id, url, idx FROM images WHERE inventory_id IN (${placeholders}) ORDER BY inventory_id, idx ASC`
        )
          .bind(...ids)
          .all()
        for (const imgRow of imgsRes.results || []) {
          imagesMap[imgRow.inventory_id] = imagesMap[imgRow.inventory_id] || []
          imagesMap[imgRow.inventory_id].push(imgRow.url)
        }
      }
      inventory = rows.map((row) => ({
        id: row.id,
        data: {
          title: row.title,
          description: row.description,
          images: imagesMap[row.id] || [],
          category: row.category,
          availability: row.availability,
          order: row.order,
          manualUrl: row.manualUrl,
        },
        slug: row.id,
      }))
    }
  }
} catch (err) {
  // swallow — show no items if DB is unavailable
  inventory = inventory || []
}

inventory = inventory || []
inventory.sort((a, b) => (a.data.order || 1000000) - (b.data.order || 1000000))
const displayItems = excerpt ? inventory.slice(0, 6) : inventory
---

<section class="mb-16">
  <h2 class="text-3xl font-bold mb-8 text-center text-slate-800 dark:text-slate-200">
    Our Inventory
  </h2>
  <p class="text-center mb-12 text-lg text-slate-600 dark:text-slate-300 max-w-3xl mx-auto">
    Discover our diverse collection of locally-made and locally-sourced items. From practical tools
    to unique custom creations, we have something for everyone.
  </p>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {
      displayItems.map((item) => (
        <a
          href={`/inventory/${item.id}`}
          class="relative flex flex-col bg-white dark:bg-slate-800 rounded-xl overflow-hidden transition-all duration-300 hover:-translate-y-2 border border-slate-100 dark:border-slate-700 block"
        >
          <img src={item.data.images[0]} alt={item.data.title} class="w-full h-48 object-cover" />
          <div class="p-6 flex-grow">
            <h3 class="text-xl font-semibold mb-2 text-slate-900 dark:text-slate-100">
              {item.data.title}
            </h3>
            <p class="text-slate-600 dark:text-slate-300">{item.data.description}</p>
          </div>
          <div class="pl-6 pr-4 pb-4 flex justify-between">
            <span class="text-blue-600 dark:text-blue-400 font-medium">View Details →</span>
            {item.data.availability === 'Sold' && (
              <div class="bg-red-600 text-white text-xs font-bold uppercase py-1 px-3 rounded-full shadow">
                Sold
              </div>
            )}
          </div>
        </a>
      ))
    }
  </div>

  {
    excerpt && (
      <p class="text-center mt-6">
        <a href="/inventory" class="text-blue-600 dark:text-blue-400 font-medium hover:underline">
          View all inventory →
        </a>
      </p>
    )
  }
</section>
